{"version":3,"sources":["components/MyForm/MyForm.js","pages/Home/Home.js","pages/Film/Film.js","pages/Audio/Audio.js","pages/Musician/Musician.js","App.js","serviceWorker.js","index.js"],"names":["MyForm","props","submitForm","bind","state","status","this","Form","onSubmit","action","method","FormGroup","Label","Input","type","name","className","Button","ev","preventDefault","form","target","data","FormData","xhr","XMLHttpRequest","open","setRequestHeader","onreadystatechange","readyState","DONE","reset","setState","send","React","Component","Home","Container","src","alt","href","Film","Audio","Musician","App","useState","isOpen","setIsOpen","id","Navbar","light","expand","NavbarToggler","onClick","Collapse","navbar","Nav","NavItem","to","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8566c8b4.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Button, Form, FormGroup, Label, Input, FormText } from 'reactstrap';\r\n\r\nexport default class MyForm extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.submitForm = this.submitForm.bind(this);\r\n    this.state = {\r\n      status: \"\"\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const { status } = this.state;\r\n    return (\r\n      <Form\r\n        onSubmit={this.submitForm}\r\n        action=\"https://formspree.io/f/xvovqwjz\"\r\n        method=\"POST\"\r\n      >\r\n        <FormGroup>\r\n        <Label>Email:</Label>\r\n        <Input type=\"email\" name=\"email\" />\r\n        </FormGroup>\r\n      \r\n\r\n        <FormGroup>\r\n        <Label>Subject:</Label>\r\n        <Input type=\"text\" name=\"subject\" />\r\n        </FormGroup>\r\n\r\n        <FormGroup>\r\n        <Label>Message:</Label>\r\n        <Input type=\"textarea\" name=\"message\" />\r\n        <br/>\r\n        <div className=\"text-center\">\r\n        {status === \"SUCCESS\" ? <alert>Thanks!</alert> : <Button className=\"button1\">Submit</Button>}\r\n        {status === \"ERROR\" && <alert>Ooops! There was an error. Please fill out all fields.</alert>}\r\n        </div>\r\n        </FormGroup>\r\n      </Form>\r\n    );\r\n  }\r\n\r\n  submitForm(ev) {\r\n    ev.preventDefault();\r\n    const form = ev.target;\r\n    const data = new FormData(form);\r\n    const xhr = new XMLHttpRequest();\r\n    xhr.open(form.method, form.action);\r\n    xhr.setRequestHeader(\"Accept\", \"application/json\");\r\n    xhr.onreadystatechange = () => {\r\n      if (xhr.readyState !== XMLHttpRequest.DONE) return;\r\n      if (xhr.status === 200) {\r\n        form.reset();\r\n        this.setState({ status: \"SUCCESS\" });\r\n      } else {\r\n        this.setState({ status: \"ERROR\" });\r\n      }\r\n    };\r\n    xhr.send(data);\r\n  }\r\n}","import React from 'react'\nimport '../../index.css'\nimport { Container, Row, Col, Button, Jumbotron } from 'reactstrap'\n\nimport MyForm from '../../components/MyForm'\n\n\n\n\nconst Home = () => {\n  return (\n    <>\n      <section>\n\n        <Container>\n          <div className=\"space\"></div>\n          <h1>I am Mel Torres</h1>\n         \n\n          <img src=\"\" alt=\"mainphoto\"/>\n\n\n          <div className=\"space\"></div>\n\n          <div className=\"bio\">\n            <h1>Bio</h1>\n            <p>Lorem ipsum dolor sit amet consectetur, adipisicing elit. Consequuntur iusto assumenda quod. Sit deserunt aliquid eveniet doloribus at non debitis, aut beatae, eligendi nostrum suscipit explicabo natus? Deleniti, tenetur illum! Lorem ipsum, dolor sit amet consectetur adipisicing elit. Itaque voluptatibus eum facilis architecto quidem. Enim, quis animi et delectus adipisci quae eius, tempora magni, molestiae hic eveniet maxime aliquid atque. Lorem ipsum dolor sit amet consectetur adipisicing elit. Voluptate voluptas tempora eligendi vitae, quia itaque quas in distinctio amet! Voluptatum fugiat accusamus deserunt eos ex sed. Odit suscipit quis assumenda! Lorem ipsum dolor sit amet consectetur adipisicing elit. Dolorem dolorum commodi voluptas cumque deserunt, iure culpa placeat quidem perferendis itaque quasi, est nemo ab nulla hic iste quibusdam officiis eos?\n\n            </p>\n          </div>\n\n\n\n\n\n\n\n\n\n          <a name='contact'></a>\n          <div className='contact'>\n            <h1 className=\"text-center\">Contact</h1>\n\n            <MyForm />\n          </div>\n\n\n          <div className=\"socials text-center\">\n\n            <a target=\"_blank\" href=\"https://www.facebook.com/AsylusMusic/\">\n            <img className=\"icons\" src=\"https://image.flaticon.com/icons/svg/56/56582.svg\" alt=\"facebook\"/>\n            </a>\n            {\"  \"}\n\n            <a target=\"_blank\" href=\"http://instagram.com/asylusmusic\">\n            <img className=\"icons\" src=\"https://cdn2.iconfinder.com/data/icons/social-icons-circular-black/512/instagram-512.png\" alt=\"instagram\"/>\n            </a>\n            {\"  \"}\n\n            <a target=\"_blank\" href=\"https://twitter.com/asylusmusic/\">\n            <img className=\"icons\" src=\"https://image.flaticon.com/icons/png/512/23/23681.png\" alt=\"twitter\"/>\n            </a>\n            {\"  \"}\n\n            <a target=\"_blank\" href=\"https://www.youtube.com/channel/UCrG0lNbd0sBZgrIBRR9WJAg\">\n            <img className=\"icons\" src=\"https://image.flaticon.com/icons/png/512/8/8782.png\" alt=\"youtube\"/>\n            </a>\n          </div>\n\n\n\n\n        </Container>\n      </section>\n    </>\n  )\n}\n\nexport default Home\n","import React from 'react'\r\nimport '../../index.css'\r\nimport { Container, Row, Col, Button, Jumbotron } from 'reactstrap'\r\n\r\n\r\n\r\nconst Film = () => {\r\n  return (\r\n    <>\r\n      <section>\r\n\r\n        <Container>\r\n          <h1>films</h1>\r\n\r\n\r\n\r\n        </Container>\r\n      </section>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Film\r\n","import React from 'react'\r\nimport '../../index.css'\r\nimport { Container, Row, Col, Button, Jumbotron } from 'reactstrap'\r\n\r\n\r\n\r\nconst Audio = () => {\r\n  return (\r\n    <>\r\n      <section>\r\n\r\n        <Container>\r\n          <h1>Aduio</h1>\r\n\r\n\r\n\r\n        </Container>\r\n      </section>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Audio\r\n","import React from 'react'\r\nimport '../../index.css'\r\nimport { Container, Row, Col, Button, Jumbotron } from 'reactstrap'\r\n\r\n\r\n\r\nconst Musician = () => {\r\n  return (\r\n    <>\r\n      <section>\r\n\r\n        <Container>\r\n          <h1>Musician</h1>\r\n\r\n\r\n\r\n        </Container>\r\n      </section>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Musician\r\n","import React, { useState } from 'react'\nimport Home from './pages/Home'\nimport Film from './pages/Film'\nimport Audio from './pages/Audio'\nimport Musician from './pages/Musician'\n\n\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  Nav,\n  NavbarText,\n  NavItem,\n  NavLink\n} from 'reactstrap'\n\nimport { Route, Switch, Link, BrowserRouter as Router } from 'react-router-dom';\n\n\nconst App = () => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const toggle = () => setIsOpen(!isOpen);\n\n  return (\n    <>\n      <Router>\n\n        <nav id='myNav'>\n\n          <Navbar light expand=\"md\">\n            <NavbarToggler onClick={toggle} />\n            <Collapse className=\"text-center\" isOpen={isOpen} navbar>\n              <Nav className=\"mr-auto ml-auto \" navbar>\n                <NavItem>\n                  <Link to=\"/\">Home</Link>\n                </NavItem>\n                {\" \"}\n                <NavItem>\n                  <Link to=\"/film\">Film</Link>\n                </NavItem>\n                {\" \"}\n                <NavItem>\n                  <Link to=\"/audio\">Audio</Link>\n                </NavItem>\n                {\" \"}\n                <NavItem>\n                  <Link to=\"/musician\">Musician</Link>\n                </NavItem>\n\n              </Nav>\n            </Collapse>\n          </Navbar>\n          <Switch>\n            <Route exact path=\"/\" component={Home} />\n            <Route path=\"/film\" component={Film} />\n            <Route path=\"/audio\" component={Audio} />\n            <Route path=\"/musician\" component={Musician} />\n          </Switch>\n        </nav>\n      </Router>\n    </>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}